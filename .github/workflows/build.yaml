name: Build
permissions:
  contents: write
on:
  workflow_dispatch:
  workflow_call:
    inputs:
      runner:
        type: string
        description: '运行器'
        required: true
        default: 'ubuntu-24.04'
      arch:
        type: string
        description: '架构'
        required: true
        default: 'amd64'
      max-task:
        type: number
        description: '最大任务数'
        required: false
        default: 10
  
jobs:
  list:
    runs-on: ${{inputs.runner}}
    outputs:
      tasks: ${{steps.check.outputs.TASKS}}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Check
        id: check
        run: |
          git submodule update --init --remote
          make tasks MAX_TASK=${{inputs.max-task}}
          echo "TASKS<<EOF" >> "$GITHUB_OUTPUT"
          cat "tasks.json" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"
        env:
          ARCH: ${{inputs.arch}}
  build:
    needs: list
    if: ${{needs.list.outputs.tasks!=''&&needs.list.outputs.tasks!='[]'}}
    strategy:
      max-parallel: 32
      matrix:
        pkg: ${{fromJson(needs.list.outputs.tasks)}}
      fail-fast: false
    runs-on: ${{inputs.runner}}
    env:
      ARCH: ${{inputs.arch}}
      PKGID: ${{matrix.pkg}}
      CACHE_DIR: caches
      PKG_WORK_DIR: caches/${{matrix.pkg}}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: true
      - name: Setup Essentials
        run: |
          # sudo apt update
          sudo apt install ostree xdotool scrot xvfb apt-file erofs-utils erofsfuse -y
          wget -nv https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-$ARCH -O cloudflared
          chmod +x cloudflared
          git -C build/$ARCH pull origin $ARCH
      - name: Check
        id: check
        run: |
          BASE=$(make -s base)
          echo "base=$BASE">>"$GITHUB_OUTPUT"
      - name: Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/linglong-builder/
          key: linglong-${{env.ARCH}}-${{steps.check.outputs.base}}
      - name: Init
        run: |
          sudo sysctl -w kernel.unprivileged_userns_clone=1
          sudo sysctl -w user.max_user_namespaces=28633
          sudo sysctl -w kernel.apparmor_restrict_unprivileged_userns=0
          sudo sysctl -w kernel.apparmor_restrict_unprivileged_unconfined=0
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
      # - uses: valeriangalliat/action-sshd-cloudflared@v3
        # if: ${{true}}
      - name: Build
        run: |
          make build
      - name: Test
        id: test
        run: |
          make test
          layer=no
          desktop=no
          fail=no
          if ls $PKG_WORK_DIR/*.layer >/dev/null;then
            layer=yes
          fi
          if ls $PKG_WORK_DIR/tests/screen*.jpg >/dev/null;then
            desktop=yes
          fi
          echo "desktop=$desktop"
          echo "layer=$layer"
          echo "fail=$fail"

          echo "desktop=$desktop" >>$GITHUB_OUTPUT
          echo "layer=$layer" >>$GITHUB_OUTPUT
          echo "fail=$fail" >>$GITHUB_OUTPUT
      - name: Upload
        if: ${{steps.test.outputs.fail=='no'}}
        run: |
          if [ -n "$SSH_URL" ];then
            mkdir -p ~/.ssh
            echo "$SSH_HOST_KEY" >> ~/.ssh/known_hosts
            echo "$SSH_PRIVATE_KEY" >> ~/.ssh/id_key
            chmod 700 -R ~/.ssh
            scp -i ~/.ssh/id_key $SSH_ARGS ${PKG_WORK_DIR}/*.layer "${SSH_URL}"
          fi
          if [ -n "$FTP_URL" ];then
            curl -T ${PKG_WORK_DIR}/*.layer "${FTP_URL}"
          fi
        env:
          FTP_URL: ${{secrets.FTP_URL}}
          SSH_URL: ${{secrets.SSH_URL}}
          SSH_HOST_KEY: ${{secrets.SSH_HOST_KEY}}
          SSH_PRIVATE_KEY: ${{secrets.SSH_PRIVATE_KEY}}
          SSH_ARGS: ${{secrets.SSH_ARGS}}
      - name: Commit
        run: |
            SRC_DIR="$PWD/$PKG_WORK_DIR"
            WORK_DIR=build/$ARCH
            cd $WORK_DIR
            git pull origin $ARCH --rebase --strategy=ours
            rm -rf "$PKGID"
            mkdir -p "$PKGID"
            shopt -s nullglob
            cp -arf $SRC_DIR/*.log $SRC_DIR/tests $SRC_DIR/*.mk $SRC_DIR/*.yaml $SRC_DIR/SHA*SUMS $SRC_DIR/version "$PKGID" 

            if [ "${{steps.test.outputs.fail}}" = "yes" ];then
              echo -n "-fail">>$PKGID/version
            fi
            
            git add "$PKGID"
            git diff --cached --quiet || git commit -m "Update ${PKGID}"
            git push -u origin HEAD:$ARCH
      - uses: valeriangalliat/action-sshd-cloudflared@v3
        if: failure()